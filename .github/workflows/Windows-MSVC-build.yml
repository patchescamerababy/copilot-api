name: Build and Release Windows (MSVC)

on:
  push:
    paths:
      - 'src/main/cpp/**'
      - '.github/workflows/Windows-MSVC-build.yml'
  pull_request:
    paths:
      - 'src/main/cpp/**'
      - '.github/workflows/Windows-MSVC-build.yml'
      
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Windows Dependencies with vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl:x64-windows-static
          .\vcpkg.exe install openssl:x64-windows-static
          .\vcpkg.exe install sqlite3:x64-windows-static
          .\vcpkg.exe install zlib:x64-windows-static
          cd ..
          mkdir -p ${{ github.workspace }}/include/nlohmann
          git clone https://github.com/yhirose/cpp-httplib.git
          cp cpp-httplib/httplib.h ${{ github.workspace }}/include/
          git clone https://github.com/nlohmann/json.git
          cp json/single_include/nlohmann/json.hpp ${{ github.workspace }}/include/nlohmann/
      
      - name: Create Build Directories
        run: |
          mkdir build\obj 2>nul
          mkdir build\bin 2>nul
        shell: cmd

      - name: Build Project Windows with MSVC
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          FOR /R src\main\cpp %%G IN (*.cpp) DO (
            echo Compiling %%~nxG...
            cl.exe /std:c++20 /EHsc /W4 /MT /DWIN32 /D_WINDOWS /DCPPHTTPLIB_OPENSSL_SUPPORT ^
              /I"%GITHUB_WORKSPACE%\include" ^
              /I"%GITHUB_WORKSPACE%\vcpkg\installed\x64-windows-static\include" ^
              /c "%%G" /Fo"build\obj\%%~nG.obj"
          )
          echo Linking...
          link.exe /OUT:build\bin\Copilot-api-MSVC.exe build\obj\*.obj ^
            /LIBPATH:"%GITHUB_WORKSPACE%\vcpkg\installed\x64-windows-static\lib" ^
            libcurl.lib libssl.lib libcrypto.lib sqlite3.lib zlib.lib ^
            ws2_32.lib crypt32.lib wldap32.lib normaliz.lib user32.lib gdi32.lib advapi32.lib

      - name: Install 7zip
        shell: bash
        run: choco install 7zip -y

      - name: Collect Windows MSVC Build Artifact
        shell: bash
        run: |
          mkdir -p build/release
          cp build/bin/Copilot-api-MSVC.exe build/release/
          cd build/release
          7z a ../Copilot-api-Windows-x86_64-msvc.zip *
          cd ../..
          echo "Listing build folder contents:"
          ls -la build

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Copilot-api-windows-msvc
          path: build/Copilot-api-Windows-x86_64-msvc.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: Copilot-api-windows-msvc
          path: Copilot-api-windows-msvc

      - name: List Downloaded Files
        run: ls -la Copilot-api-windows-msvc

      - name: Set up date
        id: date
        run: echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.DATE }}
          name: Release v${{ env.DATE }}
          files: Copilot-api-windows-msvc/Copilot-api-Windows-x86_64-msvc.zip
          draft: false
          prerelease: false
