name: AOT Compile and Release

on:
  push:
    branches:
      - main
    paths:
      - 'Spring/**'
      - '.github/workflows/Spring.yml'

jobs:
  build:
    name: Build for ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: amd64
            mvnw_cmd: ".\\mvnw.cmd"
          - os: ubuntu-latest
            arch: amd64
            mvnw_cmd: "./mvnw"
          - os: ubuntu-latest
            arch: arm64
            mvnw_cmd: "./mvnw"
          - os: macos-latest
            arch: amd64
            mvnw_cmd: "./mvnw"
          - os: macos-latest
            arch: arm64
            mvnw_cmd: "./mvnw"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          architecture: ${{ matrix.arch }}

      - name: Make mvnw Executable (Non-Windows)
        if: runner.os != 'Windows'
        run: chmod +x Spring/mvnw

      - name: Run AOT Compilation
        working-directory: Spring
        run: ${{ matrix.mvnw_cmd }} native:compile -Pnative -DskipTests

      - name: Package Application
        working-directory: Spring
        run: ${{ matrix.mvnw_cmd }} package -DskipTests

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Copilot-API-Spring-${{ matrix.os }}-${{ matrix.arch }}
          path: Spring/target

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
  
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
  
      - name: Zip Artifacts
        run: zip -r artifacts.zip artifacts

      # 生成符合格式 v-YY-MM-DD 的 tag，并写入环境变量 RELEASE_TAG
      - name: Set Release Tag
        id: set_tag
        run: |
          RELEASE_TAG=$(date +v-%y-%m-%d)
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      # 使用 ncipollo/release-action 创建 Release，会自动创建 tag（如果不存在）
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          name: "Release ${{ env.RELEASE_TAG }}"
          files: artifacts.zip
