name: AOT Compile and Release

on:
  push:
    branches:
      - main
    paths:
      - 'Spring/**'
      - '.github/workflows/Spring.yml'

jobs:
  build:
    name: Build for ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: amd64
            mvnw_cmd: ".\\mvnw.cmd"
          - os: ubuntu-latest
            arch: amd64
            mvnw_cmd: "./mvnw"
          - os: ubuntu-latest
            arch: arm64
            mvnw_cmd: "./mvnw"
          - os: macos-latest
            arch: amd64
            mvnw_cmd: "./mvnw"
          - os: macos-latest
            arch: arm64
            mvnw_cmd: "./mvnw"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          architecture: ${{ matrix.arch }}

      - name: Make mvnw Executable (Non-Windows)
        if: runner.os != 'Windows'
        run: chmod +x Spring/mvnw

      - name: Run AOT Compilation
        working-directory: Spring
        run: ${{ matrix.mvnw_cmd }} native:compile -Pnative -DskipTests

      - name: Package Application
        working-directory: Spring
        run: ${{ matrix.mvnw_cmd }} package -DskipTests

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Copilot-API-Spring-${{ matrix.os }}-${{ matrix.arch }}
          path: Spring/target

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Filter and Rename Release Assets
        run: |
          mkdir -p release-artifacts/jar
          mkdir -p release-artifacts/executables

          # 查找并复制一个jar文件（排除 .original 文件）
          jar_file=$(find artifacts -type f -name '*.jar' ! -name '*.original' | head -n 1)
          if [ -n "$jar_file" ]; then
            cp "$jar_file" "release-artifacts/jar/$(basename "$jar_file")"
          else
            echo "未找到jar文件"
          fi

          # 查找原生可执行文件，排除 .json、.class 和 .original 文件
          find artifacts -type f -name 'CopilotSpringNative*' ! -name '*.json' ! -name '*.class' ! -name '*.original' | while read file; do
            parent_dir=$(basename "$(dirname "$file")")
            base=$(basename "$file")
            if [[ "$base" == *.* ]]; then
              name_noext="${base%.*}"
              ext="${base##*.}"
            else
              name_noext="$base"
              ext=""
            fi
            newname="${name_noext}-${parent_dir}"
            if [ -n "$ext" ]; then
              newname="${newname}.${ext}"
            fi
            cp "$file" "release-artifacts/executables/$newname"
          done

          echo "Jar文件："
          ls -l release-artifacts/jar
          echo "原生可执行文件："
          ls -l release-artifacts/executables

      - name: Compress Native Executables
        run: |
          mkdir -p release-artifacts-compressed
          for file in release-artifacts/executables/*; do
            filename=$(basename "$file")
            zip "release-artifacts-compressed/${filename}.zip" "$file"
          done
          echo "压缩后的文件："
          ls -l release-artifacts-compressed

      - name: Create version
        id: version
        run: |
          VERSION=$(date +v-%Y-%m-%d)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: |
            release-artifacts/jar/*.jar
            release-artifacts-compressed/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for artifacts branch
        id: check_branch
        run: |
          git fetch origin
          if git ls-remote --heads origin artifacts | grep artifacts > /dev/null; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create artifacts branch if needed
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          git checkout -b artifacts
          mkdir -p spring
          touch spring/.gitkeep
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Initialize artifacts branch"
          git push -u origin artifacts

      - name: Checkout artifacts branch
        uses: actions/checkout@v4
        with:
          ref: artifacts
          fetch-depth: 0
          path: artifacts-branch

      - name: Update artifacts branch
        run: |
          mkdir -p artifacts-branch/spring
          cp -r release-artifacts/jar/*.jar release-artifacts-compressed/*.zip artifacts-branch/spring/ || echo "No Spring artifacts to copy"
          cd artifacts-branch
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Update artifacts for ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin artifacts
