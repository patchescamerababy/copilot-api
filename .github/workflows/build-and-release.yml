name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  version:
    uses: ./.github/workflows/version.yml

  java-build:
    runs-on: ${{ matrix.os }}
    needs: version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
          - os: windows-latest
            arch: amd64
            label: windows-amd64
          - os: macos-latest
            arch: amd64
            label: macos-amd64
          - os: macos-14
            arch: arm64
            label: macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          architecture: ${{ matrix.arch }}

      - name: Build with Maven
        run: mvn -B clean package assembly:single --file pom.xml

      - name: Prepare Native Image Directory
        shell: bash
        run: |
          mkdir -p target/native-image
          cp target/*-with-dependencies.jar target/native-image/Copilot-api.jar

      - name: Build Native Image (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        working-directory: target/native-image
        run: |
          native-image.cmd ^
          -H:+AddAllCharsets ^
          -jar Copilot-api.jar ^
          -H:Name=Java-Copilot-${{ matrix.label }} ^
          --enable-https ^
          --enable-http ^
          --no-fallback ^
          --initialize-at-build-time=Main ^
          --initialize-at-build-time=CompletionHandler ^
          --initialize-at-build-time=EmbeddingHandler ^
          --initialize-at-build-time=HeadersInfo

      - name: Build Native Image (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        working-directory: target/native-image
        run: |
          native-image \
            -H:+AddAllCharsets \
            -jar Copilot-api.jar \
            -H:Name=Java-Copilot-${{ matrix.label }} \
            --enable-https \
            --enable-http \
            --no-fallback \
            --initialize-at-build-time=Main \
            --initialize-at-build-time=CompletionHandler \
            --initialize-at-build-time=EmbeddingHandler \
            --initialize-at-build-time=HeadersInfo

      - name: Upload Native Build
        uses: actions/upload-artifact@v4
        with:
          name: java-${{ matrix.label }}
          path: "${{ format('target/native-image/Java-Copilot-{}{}', matrix.label, matrix.os == 'windows-latest' ? '.exe' : '') }}"
          retention-days: 5


      - name: Upload JARs
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: |
            target/*[^s].jar
            target/*-with-dependencies.jar
            target/*-sources.jar
            target/*-javadoc.jar
          retention-days: 5

  go-build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
            label: windows-amd64
          - goos: windows
            goarch: arm64
            suffix: .exe
            label: windows-arm64
          - goos: linux
            goarch: amd64
            suffix: ''
            label: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: ''
            label: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: ''
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: ''
            label: macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build
        working-directory: ./go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          output_name="Go-Copilot-${{ matrix.label }}${{ matrix.suffix }}"
          go build -o "$output_name" -v ./...

      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: go-${{ matrix.label }}
          path: go/Go-Copilot-${{ matrix.label }}${{ matrix.suffix }}
          retention-days: 5

  release:
    needs: [version, java-build, go-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          # 将所有 artifact 复制到发布目录
          cp -r artifacts/*/* release-files/
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: Release ${{ needs.version.outputs.version }}
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # GraalVM native builds (latest tag)
          - type: graalvm
            platform: linux/amd64
            artifact: java-linux-amd64
            tag_prefix: latest
            binary_name: Java-Copilot-linux-amd64
          - type: graalvm
            platform: linux/arm64
            artifact: java-linux-arm64
            tag_prefix: latest
            binary_name: Java-Copilot-linux-arm64
          # Java JAR builds
          - type: java
            platform: linux/amd64
            artifact: jar-files
            tag_prefix: java
            is_jar: true
          # Go builds
          - type: go
            platform: linux/amd64
            artifact: go-linux-amd64
            tag_prefix: go
            binary_name: Go-Copilot-linux-amd64
          - type: go
            platform: linux/arm64
            artifact: go-linux-arm64
            tag_prefix: go
            binary_name: Go-Copilot-linux-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Binary
        if: matrix.is_jar != true
        run: |
          mkdir -p docker
          cp build/${{ matrix.artifact }}/${{ matrix.binary_name }} docker/Copilot
          cat > docker/Dockerfile << 'EOF'
FROM ubuntu:22.04
WORKDIR /app
COPY Copilot .
RUN chmod +x Copilot
EXPOSE 80
ENTRYPOINT ["./Copilot", "80"]
EOF

      - name: Prepare Dockerfile for JAR
        if: matrix.is_jar == true
        run: |
          mkdir -p docker
          cp build/${{ matrix.artifact }}/Copilot-api-with-dependencies.jar docker/app.jar
          cat > docker/Dockerfile << 'EOF'
FROM eclipse-temurin:17-jre
WORKDIR /app
COPY app.jar .
EXPOSE 80
ENTRYPOINT ["java", "-jar", "app.jar", "80"]
EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ matrix.tag_prefix }}-${{ matrix.platform == 'linux/amd64' ? 'amd64' : 'arm64' }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ matrix.tag_prefix }}-${{ steps.version.outputs.version }}-${{ matrix.platform == 'linux/amd64' ? 'amd64' : 'arm64' }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ matrix.tag_prefix }}-${{ matrix.platform == 'linux/amd64' ? 'amd64' : 'arm64' }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ matrix.tag_prefix }}-${{ steps.version.outputs.version }}-${{ matrix.platform == 'linux/amd64' ? 'amd64' : 'arm64' }}

  docker-manifest:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      packages: write
    
    steps:
      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifests
        run: |
          # GraalVM native builds (latest)
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest

          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ steps.version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ steps.version.outputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}

          # Java JAR images
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-amd64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java

          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }}-amd64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }}

          # Go images
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go

          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}

          # GitHub Container Registry manifests (GraalVM)
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:latest

          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ steps.version.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}

          # GitHub Container Registry manifests (Java JAR)
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:java \
            ghcr.io/${{ github.repository_owner }}/copilot:java-amd64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:java

          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }}-amd64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }}

          # GitHub Container Registry manifests (Go)
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:go \
            ghcr.io/${{ github.repository_owner }}/copilot:go-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:go-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:go

          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}
