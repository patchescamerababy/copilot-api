name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - '!src/main/cpp/**'
      - 'go/**'
      - 'rust/**'
      - 'pom.xml'
      - '.github/workflows/build-and-release.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - '!src/main/cpp/**'
      - 'go/**'
      - 'rust/**'
      - 'pom.xml'
      - '.github/workflows/build-and-release.yml'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: |
        mvn -B clean package org.apache.maven.plugins:maven-assembly-plugin:3.6.0:single --file pom.xml


    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        mkdir target\native-image
        copy target\Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar target\native-image\Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar
        xcopy config target\native-image\config /E /I
        cd target\native-image
        native-image.cmd ^
          --no-fallback ^
          -J-Dsqlite.purejava=true ^
          --initialize-at-run-time=com.sun.jna,org.sqlite ^
          --enable-url-protocols=http,https ^
          -H:+JNI ^
          -H:+AddAllCharsets ^
          -H:+UnlockExperimentalVMOptions ^
          -H:+ReportExceptionStackTraces ^
          -H:ResourceConfigurationFiles=config/resource-config.json ^
          -H:ReflectionConfigurationFiles=config/reflect-config.json ^
          -H:JNIConfigurationFiles=config/jni-config.json ^
          -H:DynamicProxyConfigurationFiles=config/proxy-config.json ^
          -H:SerializationConfigurationFiles=config/serialization-config.json ^
          -jar Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar ^
          -H:Name=Java-Copilot-${{ matrix.label }}

    - name: Build Native Image (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p target/native-image
        cp target/Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar target/native-image/Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar
        cp -r config target/native-image/config
        cd target/native-image
        native-image \
          --no-fallback \
          -J-Dsqlite.purejava=true \
          --initialize-at-run-time=com.sun.jna,org.sqlite \
          --enable-url-protocols=http,https \
          -H:+JNI \
          -H:+AddAllCharsets \
          -H:+UnlockExperimentalVMOptions \
          -H:+ReportExceptionStackTraces \
          -H:ResourceConfigurationFiles=config/resource-config.json \
          -H:ReflectionConfigurationFiles=config/reflect-config.json \
          -H:JNIConfigurationFiles=config/jni-config.json \
          -H:DynamicProxyConfigurationFiles=config/proxy-config.json \
          -H:SerializationConfigurationFiles=config/serialization-config.json \
          -jar Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar \
          -H:Name=Java-Copilot-${{ matrix.label }} \
          ${{ matrix.static == true && '--static' || '' }}

    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*[^s].jar
          target/*-with-dependencies.jar
          target/*-sources.jar
          target/*-javadoc.jar
        retention-days: 5

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.label }}
        path: target/native-image/Java-Copilot-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5






  go-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            label: windows-amd64
          - goos: windows
            goarch: arm64
            label: windows-arm64
          - goos: linux
            goarch: amd64
            label: linux-amd64
          - goos: linux
            goarch: arm64
            label: linux-arm64
          - goos: linux
            goarch: mips
            label: linux-mips
          - goos: linux
            goarch: mipsle
            label: linux-mipsle
          - goos: linux
            goarch: mips64
            label: linux-mips64
          - goos: linux
            goarch: mips64le
            label: linux-mips64le
          - goos: darwin
            goarch: amd64
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        check-latest: true

    - name: Build
      working-directory: ./go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}"
        go build -o "$output_name" -v ./...

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: go-${{ matrix.label }}
        path: go/Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        retention-days: 5

  # Build native rust targets (no cross-compilation)
  rust-build-native:
    name: Rust Build Native
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: get-token-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: get-token-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: get-token-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: get-token-macos-arm64

    defaults:
      run:
        working-directory: ./src/rust

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    # Windows dependencies
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg integrate install

    # Linux dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev libssl-dev pkg-config

    # Build using cargo for standard targets
    - name: Build with cargo
      run: cargo build --verbose --release --target ${{ matrix.target }}

    # Run tests for standard targets
    - name: Run tests
      run: cargo test --verbose --target ${{ matrix.target }}

    # Package Windows artifacts
    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $binaryPath = "target/${{ matrix.target }}/release/Get-token.exe"
        if (Test-Path $binaryPath) {
          Copy-Item $binaryPath "${{ matrix.artifact_name }}"
          7z a "${{ matrix.artifact_name }}.zip" "${{ matrix.artifact_name }}"
        } else {
          Write-Error "Binary not found at $binaryPath"
          exit 1
        }

    # Package Unix artifacts
    - name: Prepare artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        binary_path="target/${{ matrix.target }}/release/Get-token"
        if [ -f "$binary_path" ]; then
          cp "$binary_path" "${{ matrix.artifact_name }}"
          tar -czf "${{ matrix.artifact_name }}.tar.gz" "${{ matrix.artifact_name }}"
        else
          echo "Binary not found at $binary_path"
          find target -type f -name "Get-token" || echo "Binary not found anywhere"
          exit 1
        fi
        
    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-${{ matrix.artifact_name }}
        path: ./src/rust/${{ matrix.artifact_name }}.*
        retention-days: 5
        if-no-files-found: warn

  # Build cross-compilation targets using cross tool
  rust-build-cross:
    name: Rust Build Cross-Compiled Targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-pc-windows-msvc
        include:
          - target: aarch64-unknown-linux-gnu
            artifact_name: get-token-linux-arm64
          - target: aarch64-pc-windows-msvc
            artifact_name: get-token-windows-arm64.exe

    defaults:
      run:
        working-directory: ./src/rust

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    # Install cross for cross-compilation
    - name: Install cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    # Linux dependencies
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev libssl-dev pkg-config

    # Try to build with cross - continue even if it fails
    - name: Try building with cross
      id: cross_build
      continue-on-error: true
      run: |
        if [[ "${{ matrix.target }}" == *"linux"* ]]; then
          # For Linux targets, use cross
          cross build --verbose --release --target ${{ matrix.target }}
        elif [[ "${{ matrix.target }}" == "aarch64-pc-windows-msvc" ]]; then
          # For Windows ARM64, try with rustls feature
          cargo build --release --target ${{ matrix.target }} --no-default-features --features rustls-tls
        else
          cargo build --verbose --release --target ${{ matrix.target }}
        fi
        echo "build_succeeded=true" >> $GITHUB_OUTPUT

    # Package Windows artifacts if build succeeded
    - name: Prepare Windows artifacts
      if: matrix.target == 'aarch64-pc-windows-msvc' && steps.cross_build.outputs.build_succeeded == 'true'
      run: |
        if [ -f "target/${{ matrix.target }}/release/Get-token.exe" ]; then
          cp "target/${{ matrix.target }}/release/Get-token.exe" "${{ matrix.artifact_name }}"
          7z a "${{ matrix.artifact_name }}.zip" "${{ matrix.artifact_name }}"
        else
          echo "Windows ARM64 binary not found, creating placeholder"
          echo "Windows ARM64 build not available" > "${{ matrix.artifact_name }}.txt"
          7z a "${{ matrix.artifact_name }}.zip" "${{ matrix.artifact_name }}.txt"
        fi

    # Package Linux artifacts if build succeeded
    - name: Prepare Linux artifacts
      if: matrix.target == 'aarch64-unknown-linux-gnu' && steps.cross_build.outputs.build_succeeded == 'true'
      run: |
        if [ -f "target/${{ matrix.target }}/release/Get-token" ]; then
          cp "target/${{ matrix.target }}/release/Get-token" "${{ matrix.artifact_name }}"
          tar -czf "${{ matrix.artifact_name }}.tar.gz" "${{ matrix.artifact_name }}"
        else
          echo "Linux ARM64 binary not found, creating placeholder"
          echo "Linux ARM64 build not available" > "${{ matrix.artifact_name }}.txt"
          tar -czf "${{ matrix.artifact_name }}.tar.gz" "${{ matrix.artifact_name }}.txt"
        fi

    # Create placeholders if build failed
    - name: Create placeholder artifacts
      if: steps.cross_build.outputs.build_succeeded != 'true'
      run: |
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          echo "Windows ARM64 build not available" > "${{ matrix.artifact_name }}.txt"
          7z a "${{ matrix.artifact_name }}.zip" "${{ matrix.artifact_name }}.txt"
        else
          echo "Linux ARM64 build not available" > "${{ matrix.artifact_name }}.txt"
          tar -czf "${{ matrix.artifact_name }}.tar.gz" "${{ matrix.artifact_name }}.txt"
        fi

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-${{ matrix.artifact_name }}
        path: ./src/rust/${{ matrix.artifact_name }}.*
        retention-days: 5
        if-no-files-found: warn
        
  # Build MIPS targets with nightly toolchain
  rust-build-mips:
    name: Rust Build MIPS Targets
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the whole build if MIPS targets aren't available
    
    defaults:
      run:
        working-directory: ./src/rust
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly for MIPS support
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal

    # Install cross for MIPS builds
    - name: Install cross for MIPS targets
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    # Try to add MIPS targets and build placeholders if unavailable
    - name: Try adding MIPS targets
      run: |
        mkdir -p ./mips-builds
        
        # Try adding each target
        for TARGET in "mips-unknown-linux-gnu" "mips64-unknown-linux-gnuabi64"; do
          echo "Trying to add target $TARGET..."
          if rustup target add --toolchain nightly $TARGET; then
            echo "$TARGET available, will build"
            echo "1" > "./mips-builds/$TARGET.available"
          else
            echo "$TARGET not available, will create placeholder"
            echo "0" > "./mips-builds/$TARGET.available"
          fi
        done

    # Build for MIPS targets that are available
    - name: Build MIPS targets
      run: |
        # Try to build for each MIPS target if available
        if [ -f "./mips-builds/mips-unknown-linux-gnu.available" ] && [ "$(cat ./mips-builds/mips-unknown-linux-gnu.available)" = "1" ]; then
          echo "Building for mips-unknown-linux-gnu"
          cross build --release --target=mips-unknown-linux-gnu
          cp target/mips-unknown-linux-gnu/release/Get-token ./get-token-linux-mips
          tar -czf get-token-linux-mips.tar.gz get-token-linux-mips
        else
          echo "Creating placeholder for mips-unknown-linux-gnu"
          echo "MIPS build not available in standard Rust channels" > get-token-linux-mips.txt
          tar -czf get-token-linux-mips.tar.gz get-token-linux-mips.txt
        fi
        
        if [ -f "./mips-builds/mips64-unknown-linux-gnuabi64.available" ] && [ "$(cat ./mips-builds/mips64-unknown-linux-gnuabi64.available)" = "1" ]; then
          echo "Building for mips64-unknown-linux-gnuabi64"
          cross build --release --target=mips64-unknown-linux-gnuabi64
          cp target/mips64-unknown-linux-gnuabi64/release/Get-token ./get-token-linux-mips64
          tar -czf get-token-linux-mips64.tar.gz get-token-linux-mips64
        else
          echo "Creating placeholder for mips64-unknown-linux-gnuabi64"
          echo "MIPS64 build not available in standard Rust channels" > get-token-linux-mips64.txt
          tar -czf get-token-linux-mips64.tar.gz get-token-linux-mips64.txt
        fi

    # Upload MIPS artifacts (even if they're just placeholders)
    - name: Upload MIPS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-mips-builds
        path: ./src/rust/get-token-linux-mips*.tar.gz
        retention-days: 5
        if-no-files-found: warn

  release:
    needs: [java-build, go-build, rust-build-native, rust-build-cross, rust-build-mips]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check if artifacts branch exists and create it if it doesn't
      - name: Check for artifacts branch
        id: check_branch
        run: |
          git fetch origin
          if git ls-remote --heads origin artifacts | grep artifacts > /dev/null; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      # Clone main branch to create artifacts branch if it doesn't exist
      - name: Create artifacts branch if needed
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          # Checkout main branch
          git checkout -b artifacts
          # Create basic structure
          mkdir -p java go rust
          touch java/.gitkeep go/.gitkeep rust/.gitkeep
          # Commit and push new branch
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Initialize artifacts branch"
          git push -u origin artifacts

      # Update artifacts branch
      - name: Checkout artifacts branch
        uses: actions/checkout@v4
        with:
          ref: artifacts
          fetch-depth: 0
          path: artifacts-branch

      - name: Update artifacts branch
        run: |
          # Create directories if they don't exist
          mkdir -p artifacts-branch/java
          mkdir -p artifacts-branch/go
          mkdir -p artifacts-branch/rust
          
          # Copy artifacts
          cp -r artifacts/java-* artifacts-branch/java/ || echo "No Java artifacts to copy"
          cp -r artifacts/go-* artifacts-branch/go/ || echo "No Go artifacts to copy"
          cp -r artifacts/rust-* artifacts-branch/rust/ || echo "No Rust artifacts to copy"
          
          # Commit and push
          cd artifacts-branch
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Update artifacts for v${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin artifacts

  docker-graalvm:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: java-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: java-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Java-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker/copilot
          cat > docker/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot .
          RUN chmod +x copilot
          EXPOSE 80
          ENTRYPOINT ["./copilot", "80"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-java:
    needs: [release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Java
        run: |
          mkdir -p docker-java
          cp build/*.jar docker-java/
          cat > docker-java/Dockerfile << 'EOF'
          FROM openjdk:17-slim
          WORKDIR /app
          COPY *-with-dependencies.jar app.jar
          EXPOSE 80
          ENTRYPOINT ["java", "-jar", "app.jar", "80"]
          EOF

      - name: Build and push Java Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-java
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/copilot:java-latest
            ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }}

  docker-go:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: go-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: go-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download Go artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Go
        run: |
          mkdir -p docker-go
          cp build/Go-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker-go/copilot-go
          cat > docker-go/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot-go .
          RUN chmod +x copilot-go
          EXPOSE 80
          ENTRYPOINT ["./copilot-go", "80"]
          EOF

      - name: Build and push Go Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-go
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-manifest:
    needs: [docker-graalvm, docker-go, docker-java]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
  
      - name: Set Docker CLI experimental
        run: |
          mkdir -p ~/.docker
          echo '{"experimental": "enabled"}' > ~/.docker/config.json
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create and push Docker Hub manifests
        continue-on-error: true
        run: |
          echo "Creating Docker Hub manifests..."
          
          # Pull the images first to ensure they exist locally
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 || echo "Image not found"
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64 || echo "Image not found"
          
          # Create version manifest
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-arm64
          
          # Create latest manifest
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64
          
          # Push manifests
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest
          
          # Go version manifests
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-amd64 || echo "Image not found"
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-arm64 || echo "Image not found"
          
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-arm64
          
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-arm64
          
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest
  
      - name: Create and push GitHub Container Registry manifests
        continue-on-error: true
        run: |
          echo "Creating GitHub Container Registry manifests..."
          
          # Pull the images first to ensure they exist locally
          docker pull ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 || echo "Image not found"
          docker pull ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64 || echo "Image not found"
          
          # Create version manifest
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-arm64
          
          # Create latest manifest
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64
          
          # Push manifests
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:latest
          
          # Go version manifests
          docker pull ghcr.io/${{ github.repository_owner }}/copilot:go-latest-amd64 || echo "Image not found"
          docker pull ghcr.io/${{ github.repository_owner }}/copilot:go-latest-arm64 || echo "Image not found"
          
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-arm64
          
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:go-latest \
            ghcr.io/${{ github.repository_owner }}/copilot:go-latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:go-latest-arm64
          
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:go-latest
