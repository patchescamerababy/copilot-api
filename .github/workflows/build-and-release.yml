name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'rust/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'rust/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: mvn -B clean package assembly:single --file pom.xml

    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*[^s].jar
          target/*-with-dependencies.jar
          target/*-sources.jar
          target/*-javadoc.jar
        retention-days: 5

    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        mkdir target\native-image
        copy target\Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar target\native-image\Copilot-api.jar
        cd target\native-image
        native-image.cmd ^
        -H:+AddAllCharsets ^
        -jar Copilot-api.jar ^
        -H:Name=Java-Copilot-${{ matrix.label }} ^
        --enable-https ^
        --enable-http ^
        --static ^
        --no-fallback ^
        --initialize-at-build-time=Main ^
        --initialize-at-build-time=CompletionHandler ^
        --initialize-at-build-time=EmbeddingHandler ^
        --initialize-at-build-time=HeadersInfo

    - name: Build Native Image (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p target/native-image
        cp target/*-with-dependencies.jar target/native-image/Copilot-api.jar
        cd target/native-image
        native-image \
          -H:+AddAllCharsets \
          -jar Copilot-api.jar \
          -H:Name=Java-Copilot-${{ matrix.label }} \
          --enable-https \
          --enable-http \
          ${{ matrix.static == true && '--static' || '' }} \
          --no-fallback \
          --initialize-at-build-time=Main \
          --initialize-at-build-time=CompletionHandler \
          --initialize-at-build-time=EmbeddingHandler \
          --initialize-at-build-time=HeadersInfo

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.label }}
        path: target/native-image/Java-Copilot-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5

  go-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            label: windows-amd64
          - goos: windows
            goarch: arm64
            label: windows-arm64
          - goos: linux
            goarch: amd64
            label: linux-amd64
          - goos: linux
            goarch: arm64
            label: linux-arm64
          - goos: linux
            goarch: mips
            label: linux-mips
          - goos: linux
            goarch: mipsle
            label: linux-mipsle
          - goos: linux
            goarch: mips64
            label: linux-mips64
          - goos: linux
            goarch: mips64le
            label: linux-mips64le
          - goos: darwin
            goarch: amd64
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build
      working-directory: ./go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}"
        go build -o "$output_name" -v ./...

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: go-${{ matrix.label }}
        path: go/Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        retention-days: 5

  # Build native rust targets (no cross-compilation)
  rust-build-native:
    name: Rust Build Native
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: get-token-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: get-token-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: get-token-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: get-token-macos-arm64

    defaults:
      run:
        working-directory: ./src/rust/

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    # Windows dependencies
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg integrate install

    # Linux dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev libssl-dev pkg-config

    # Build using cargo for standard targets
    - name: Build with cargo
      run: cargo build --verbose --release --target ${{ matrix.target }}

    # Run tests for standard targets
    - name: Run tests
      run: cargo test --verbose --target ${{ matrix.target }}

    # Package Windows artifacts
    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $binaryPath = "target/${{ matrix.target }}/release/Get-token.exe"
        if (Test-Path $binaryPath) {
          Copy-Item $binaryPath "${{ matrix.artifact_name }}"
          7z a "${{ matrix.artifact_name }}.zip" "${{ matrix.artifact_name }}"
        } else {
          Write-Error "Binary not found at $binaryPath"
          exit 1
        }

    # Package Unix artifacts
    - name: Prepare artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        binary_path="target/${{ matrix.target }}/release/Get-token"
        if [ -f "$binary_path" ]; then
          cp "$binary_path" "${{ matrix.artifact_name }}"
          tar -czf "${{ matrix.artifact_name }}.tar.gz" "${{ matrix.artifact_name }}"
        else
          echo "Binary not found at $binary_path"
          find target -type f -name "Get-token" || echo "Binary not found anywhere"
          exit 1
        fi
        
    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-${{ matrix.artifact_name }}
        path: ./rust/${{ matrix.artifact_name }}.*
        retention-days: 5
        if-no-files-found: warn

  # Build cross-compilation targets using cross tool
  rust-build-cross:
    name: Rust Build Cross-Compiled Targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64-unknown-linux-gnu, aarch64-pc-windows-msvc]
        include:
          - target: aarch64-unknown-linux-gnu
            artifact_name: get-token-linux-arm64
          - target: aarch64-pc-windows-msvc
            artifact_name: get-token-windows-arm64.exe

    defaults:
      run:
        working-directory: ./rust

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    # Install cross for cross-compilation
    - name: Install cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    # Linux dependencies
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev libssl-dev pkg-config

    # Try to build with cross - continue even if it fails
    - name: Try building with cross
      id: cross_build
      continue-on-error: true
      run: |
        if [[ "${{ matrix.target }}" == *"linux"* ]]; then
          # For Linux targets, use cross
          cross build --verbose --release --target ${{ matrix.target }}
        elif [[ "${{ matrix.target }}" == "aarch64-pc-windows-msvc" ]]; then
          # For Windows ARM64, use special flags to bypass OpenSSL
          RUSTFLAGS="-C target-feature=+crt-static" cargo build --release --target ${{ matrix.target }} --no-default-features --features native-tls-vendored
        else
          cargo build --verbose --release --target ${{ matrix.target }}
        fi
        echo "build_succeeded=true" >> $GITHUB_OUTPUT

    # Package Windows artifacts if build succeeded
     ▋
