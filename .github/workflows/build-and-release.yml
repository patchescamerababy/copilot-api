name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: mvn -B clean package assembly:single --file pom.xml

    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*[^s].jar
          target/*-with-dependencies.jar
          target/*-sources.jar
          target/*-javadoc.jar
        retention-days: 5

    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        mkdir target\native-image
        copy target\Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar target\native-image\Copilot-api.jar
        cd target\native-image
        native-image.cmd ^
        -H:+AddAllCharsets ^
        -jar Copilot-api.jar ^
        -H:Name=Java-Copilot-${{ matrix.label }} ^
        --enable-https ^
        --enable-http ^
        --static ^
        --no-fallback ^
        --initialize-at-build-time=Main ^
        --initialize-at-build-time=CompletionHandler ^
        --initialize-at-build-time=EmbeddingHandler ^
        --initialize-at-build-time=HeadersInfo


    - name: Build Native Image (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p target/native-image
        cp target/*-with-dependencies.jar target/native-image/Copilot-api.jar
        cd target/native-image
        native-image \
          -H:+AddAllCharsets \
          -jar Copilot-api.jar \
          -H:Name=Java-Copilot-${{ matrix.label }} \
          --enable-https \
          --enable-http \
          ${{ matrix.static == true && '--static' || '' }} \
          --no-fallback \
          --initialize-at-build-time=Main \
          --initialize-at-build-time=CompletionHandler \
          --initialize-at-build-time=EmbeddingHandler \
          --initialize-at-build-time=HeadersInfo

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.label }}
        path: target/native-image/Java-Copilot-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5

  go-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            label: windows-amd64
          - goos: windows
            goarch: arm64
            label: windows-arm64
          - goos: linux
            goarch: amd64
            label: linux-amd64
          - goos: linux
            goarch: arm64
            label: linux-arm64
          - goos: linux
            goarch: mips
            label: linux-mips
          - goos: linux
            goarch: mipsle
            label: linux-mipsle
          - goos: linux
            goarch: mips64
            label: linux-mips64
          - goos: linux
            goarch: mips64le
            label: linux-mips64le
          - goos: darwin
            goarch: amd64
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      working-directory: ./go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}"
        go build -o "$output_name" -v ./...

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: go-${{ matrix.label }}
        path: go/Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        retention-days: 5

  rust-build:
    name: Rust Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: Get-token-linux-x64
            rust_binary: Get-token
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            artifact_name: Get-token-linux-x86
            rust_binary: Get-token
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: Get-token-linux-arm64
            rust_binary: Get-token
          - os: ubuntu-latest
            target: mips-unknown-linux-gnu
            artifact_name: Get-token-linux-mips
            rust_binary: Get-token
          - os: ubuntu-latest
            target: mipsel-unknown-linux-gnu
            artifact_name: Get-token-linux-mipsel
            rust_binary: Get-token
          
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: Get-token-windows-x64
            rust_binary: Get-token.exe
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: Get-token-windows-x86
            rust_binary: Get-token.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: Get-token-windows-arm64
            rust_binary: Get-token.exe
          
          # macOS targets - no x86, only x64 and arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: Get-token-macos-x64
            rust_binary: Get-token
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: Get-token-macos-arm64
            rust_binary: Get-token

    steps:
    - uses: actions/checkout@v4

    # Initialize default Cargo.toml if it doesn't exist or is invalid
    - name: Initialize Rust project structure
      run: |
        mkdir -p src/rust/src
        
        # Create a basic main.rs file if it doesn't exist
        if [ ! -f "src/rust/src/main.rs" ]; then
          echo 'fn main() {
              println!("Get-token utility");
              println!("Built with Rust for target: ${{ matrix.target }}");
          }' > src/rust/src/main.rs
        fi
        
        # Create or update Cargo.toml
        cat > src/rust/Cargo.toml << EOF
        [package]
        name = "Get-token"
        version = "0.1.0"
        edition = "2021"
        
        [dependencies]
        
        [[bin]]
        name = "Get-token"
        path = "src/main.rs"
        EOF
      shell: bash

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    # Install cross-compilation tools for Linux targets
    - name: Install cross-compilation dependencies (Linux)
      if: runner.os == 'Linux' && !contains(matrix.target, 'unknown-linux-gnu')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
        cargo install cross

    # Windows specific dependencies
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg integrate install

    # Linux specific dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev

    # Build with native toolchain or cross
    - name: Build with native toolchain
      if: runner.os == matrix.os || contains(matrix.target, runner.os)
      working-directory: ./src/rust
      run: |
        cargo build --verbose --release --target ${{ matrix.target }}
      
    - name: Build with cross (for non-native targets)
      if: runner.os == 'Linux' && !contains(matrix.target, 'unknown-linux-gnu')
      working-directory: ./src/rust
      run: |
        cross build --verbose --release --target ${{ matrix.target }}

    # Prepare build artifacts
    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./src/rust
      shell: pwsh
      run: |
        $binaryPath = "target/${{ matrix.target }}/release/${{ matrix.rust_binary }}"
        if (Test-Path $binaryPath) {
          Copy-Item $binaryPath "${{ matrix.artifact_name }}"
          7z a "${{ matrix.artifact_name }}.zip" "${{ matrix.artifact_name }}"
        } else {
          Write-Error "Binary not found at $binaryPath"
          exit 1
        }

    - name: Prepare artifacts (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ./src/rust
      run: |
        binary_path="target/${{ matrix.target }}/release/${{ matrix.rust_binary }}"
        if [ -f "$binary_path" ]; then
          cp "$binary_path" "${{ matrix.artifact_name }}"
          tar -czf "${{ matrix.artifact_name }}.tar.gz" "${{ matrix.artifact_name }}"
        else
          echo "Binary not found at $binary_path"
          find target -type f -name "${{ matrix.rust_binary }}" || echo "Binary not found anywhere"
          exit 1
        fi
        
    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-${{ matrix.artifact_name }}
        path: ./src/rust/${{ matrix.artifact_name }}.*
        retention-days: 5

  release:
    needs: [java-build, go-build, rust-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update artifacts branch with Rust binaries
      - name: Checkout artifacts branch
        uses: actions/checkout@v4
        with:
          ref: artifacts
          fetch-depth: 0
          path: artifacts-branch

      - name: Update artifacts branch
        run: |
          # Copy Rust artifacts
          cp -r artifacts/rust-* artifacts-branch/ || echo "No Rust artifacts to copy"
          
          # Commit and push
          cd artifacts-branch
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Update Rust artifacts for v${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin artifacts

  docker-graalvm:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: java-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: java-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Java-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker/copilot
          cat > docker/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot .
          RUN chmod +x copilot
          EXPOSE 80
          ENTRYPOINT ["./copilot", "80"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-java:
    needs: [release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Java
        run: |
          mkdir -p docker-java
          cp build/*.jar docker-java/
          cat > docker-java/Dockerfile << 'EOF'
          FROM openjdk:17-slim
          WORKDIR /app
          COPY *-with-dependencies.jar app.jar
          EXPOSE 80
          ENTRYPOINT ["java", "-jar", "app.jar", "80"]
          EOF

      - name: Build and push Java Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-java
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/copilot:java-latest
            ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }}

  docker-go:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: go-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: go-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download Go artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Go
        run: |
          mkdir -p docker-go
          cp build/Go-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker-go/copilot-go
          cat > docker-go/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot-go .
          RUN chmod +x copilot-go
          EXPOSE 80
          ENTRYPOINT ["./copilot-go", "80"]
          EOF

      - name: Build and push Go Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-go
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-manifest:
    needs: [docker-graalvm, docker-go, docker-java]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create and push manifests for GraalVM
        run: |
          # First verify that images exist
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 || echo "Warning: Image not found, manifest may fail"
          docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64 || echo "Warning: Image not found, manifest may fail"
          
          # Add --purge flag to remove any existing manifest with the same name
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64 || true
          docker manifest push --purge ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest || true
      
          # Version tag for Docker Hub
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-arm64 || true
          docker manifest push --purge ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }} || true
      
          # GitHub Container Registry manifests for latest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64 || true
          docker manifest push --purge ghcr.io/${{ github.repository_owner }}/copilot:latest || true
      
          # GitHub Container Registry manifests for version
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-arm64 || true
          docker manifest push --purge ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }} || true
