name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: mvn -B clean package assembly:single --file pom.xml

    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*[^s].jar
          target/*-with-dependencies.jar
          target/*-sources.jar
          target/*-javadoc.jar
        retention-days: 5

    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        mkdir target\native-image
        copy target\Copilot2API-1.0-SNAPSHOT-jar-with-dependencies.jar target\native-image\Copilot-api.jar
        cd target\native-image
        native-image.cmd ^
        -H:+AddAllCharsets ^
        -jar Copilot-api.jar ^
        -H:Name=Java-Copilot-${{ matrix.label }} ^
        --enable-https ^
        --enable-http ^
        --static ^
        --no-fallback ^
        --initialize-at-build-time=Main ^
        --initialize-at-build-time=CompletionHandler ^
        --initialize-at-build-time=EmbeddingHandler ^
        --initialize-at-build-time=HeadersInfo


    - name: Build Native Image (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p target/native-image
        cp target/*-with-dependencies.jar target/native-image/Copilot-api.jar
        cd target/native-image
        native-image \
          -H:+AddAllCharsets \
          -jar Copilot-api.jar \
          -H:Name=Java-Copilot-${{ matrix.label }} \
          --enable-https \
          --enable-http \
          ${{ matrix.static == true && '--static' || '' }} \
          --no-fallback \
          --initialize-at-build-time=Main \
          --initialize-at-build-time=CompletionHandler \
          --initialize-at-build-time=EmbeddingHandler \
          --initialize-at-build-time=HeadersInfo

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.label }}
        path: target/native-image/Java-Copilot-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5

  go-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            label: windows-amd64
          - goos: windows
            goarch: arm64
            label: windows-arm64
          - goos: linux
            goarch: amd64
            label: linux-amd64
          - goos: linux
            goarch: arm64
            label: linux-arm64
          - goos: linux
            goarch: mips
            label: linux-mips
          - goos: linux
            goarch: mipsle
            label: linux-mipsle
          - goos: linux
            goarch: mips64
            label: linux-mips64
          - goos: linux
            goarch: mips64le
            label: linux-mips64le
          - goos: darwin
            goarch: amd64
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      working-directory: ./go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}"
        go build -o "$output_name" -v ./...

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: go-${{ matrix.label }}
        path: go/Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        retention-days: 5

  rust-build-linux-standard:
    name: Rust Build Linux Standard
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Add standard Linux targets
      run: |
        rustup target add x86_64-unknown-linux-gnu
        rustup target add i686-unknown-linux-gnu
        rustup target add aarch64-unknown-linux-gnu

    - name: Install required dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libx11-dev libxkbcommon-dev

    - name: Build for x86_64-linux
      run: |
        cd ./src/rust
        cargo build --release --target=x86_64-unknown-linux-gnu
        cp target/x86_64-unknown-linux-gnu/release/Get-token ./Get-token-linux-x64
        tar -czf Get-token-linux-x64.tar.gz Get-token-linux-x64

    - name: Build for i686-linux
      run: |
        cd ./src/rust
        cargo build --release --target=i686-unknown-linux-gnu
        cp target/i686-unknown-linux-gnu/release/Get-token ./Get-token-linux-x86
        tar -czf Get-token-linux-x86.tar.gz Get-token-linux-x86

    - name: Build for aarch64-linux
      run: |
        cd ./src/rust
        cargo build --release --target=aarch64-unknown-linux-gnu
        cp target/aarch64-unknown-linux-gnu/release/Get-token ./Get-token-linux-arm64
        tar -czf Get-token-linux-arm64.tar.gz Get-token-linux-arm64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-linux-builds
        path: ./src/rust/Get-token-linux-*.tar.gz
        retention-days: 5
        if-no-files-found: warn

  rust-build-linux-mips:
    name: Rust Build Linux MIPS
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust Nightly (for MIPS support)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true
        
    # Try to add MIPS targets with nightly toolchain
    - name: Try to add MIPS targets
      run: |
        mkdir -p ./mips_targets
        
        # Try each MIPS target and record result
        rustup target add mips-unknown-linux-gnu && echo "mips" > ./mips_targets/mips || echo "mips target not available"
        rustup target add mipsel-unknown-linux-gnu && echo "mipsel" > ./mips_targets/mipsel || echo "mipsel target not available"
        rustup target add mips64-unknown-linux-gnuabi64 && echo "mips64" > ./mips_targets/mips64 || echo "mips64 target not available"
        rustup target add mips64el-unknown-linux-gnuabi64 && echo "mips64el" > ./mips_targets/mips64el || echo "mips64el target not available"

    - name: Install cross for MIPS builds
      run: cargo install cross --git https://github.com/cross-rs/cross

    # Build for each available MIPS target
    - name: Build for MIPS targets
      run: |
        cd ./src/rust
        
        # MIPS 32-bit (big endian)
        if [ -f "../../mips_targets/mips" ]; then
          cross build --release --target=mips-unknown-linux-gnu
          cp target/mips-unknown-linux-gnu/release/Get-token ./Get-token-linux-mips
          tar -czf Get-token-linux-mips.tar.gz Get-token-linux-mips
        else
          echo "Skipping mips build - target not available"
          echo "MIPS build not available" > Get-token-linux-mips.txt
          tar -czf Get-token-linux-mips.tar.gz Get-token-linux-mips.txt
        fi
        
        # MIPS 32-bit (little endian)
        if [ -f "../../mips_targets/mipsel" ]; then
          cross build --release --target=mipsel-unknown-linux-gnu
          cp target/mipsel-unknown-linux-gnu/release/Get-token ./Get-token-linux-mipsel
          tar -czf Get-token-linux-mipsel.tar.gz Get-token-linux-mipsel
        else
          echo "Skipping mipsel build - target not available"
          echo "MIPS Little Endian build not available" > Get-token-linux-mipsel.txt
          tar -czf Get-token-linux-mipsel.tar.gz Get-token-linux-mipsel.txt
        fi
        
        # MIPS 64-bit (big endian)
        if [ -f "../../mips_targets/mips64" ]; then
          cross build --release --target=mips64-unknown-linux-gnuabi64
          cp target/mips64-unknown-linux-gnuabi64/release/Get-token ./Get-token-linux-mips64
          tar -czf Get-token-linux-mips64.tar.gz Get-token-linux-mips64
        else
          echo "Skipping mips64 build - target not available"
          echo "MIPS64 build not available" > Get-token-linux-mips64.txt
          tar -czf Get-token-linux-mips64.tar.gz Get-token-linux-mips64.txt
        fi
        
        # MIPS 64-bit (little endian)
        if [ -f "../../mips_targets/mips64el" ]; then
          cross build --release --target=mips64el-unknown-linux-gnuabi64
          cp target/mips64el-unknown-linux-gnuabi64/release/Get-token ./Get-token-linux-mips64el
          tar -czf Get-token-linux-mips64el.tar.gz Get-token-linux-mips64el
        else
          echo "Skipping mips64el build - target not available"
          echo "MIPS64 Little Endian build not available" > Get-token-linux-mips64el.txt
          tar -czf Get-token-linux-mips64el.tar.gz Get-token-linux-mips64el.txt
        fi

    - name: Upload MIPS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-linux-mips-builds
        path: ./src/rust/Get-token-linux-mips*.tar.gz
        retention-days: 5
        if-no-files-found: warn

  rust-build-windows:
    name: Rust Build Windows
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Add Windows targets
      run: |
        rustup target add x86_64-pc-windows-msvc
        rustup target add i686-pc-windows-msvc
        rustup target add aarch64-pc-windows-msvc

    # Install dependencies for clipboard functionality
    - name: Install dependencies
      run: |
        # For clipboard support on Windows
        vcpkg integrate install

    - name: Build for x86_64-windows
      run: |
        cd ./src/rust
        cargo build --release --target=x86_64-pc-windows-msvc
        if (Test-Path "target/x86_64-pc-windows-msvc/release/Get-token.exe") {
          Copy-Item "target/x86_64-pc-windows-msvc/release/Get-token.exe" -Destination "Get-token-windows-x64.exe"
          7z a "Get-token-windows-x64.zip" "Get-token-windows-x64.exe"
        } else {
          Write-Output "x86_64 Windows binary not found, checking path..."
          Get-ChildItem -Path "target" -Recurse -Filter "Get-token.exe"
          exit 1
        }

    - name: Build for i686-windows
      run: |
        cd ./src/rust
        cargo build --release --target=i686-pc-windows-msvc
        if (Test-Path "target/i686-pc-windows-msvc/release/Get-token.exe") {
          Copy-Item "target/i686-pc-windows-msvc/release/Get-token.exe" -Destination "Get-token-windows-x86.exe"
          7z a "Get-token-windows-x86.zip" "Get-token-windows-x86.exe"
        } else {
          Write-Output "i686 Windows binary not found"
          exit 1
        }

    - name: Build for aarch64-windows
      run: |
        cd ./src/rust
        cargo build --release --target=aarch64-pc-windows-msvc
        if (Test-Path "target/aarch64-pc-windows-msvc/release/Get-token.exe") {
          Copy-Item "target/aarch64-pc-windows-msvc/release/Get-token.exe" -Destination "Get-token-windows-arm64.exe"
          7z a "Get-token-windows-arm64.zip" "Get-token-windows-arm64.exe"
        } else {
          Write-Output "ARM64 Windows binary not found"
          exit 1
        }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-windows-builds
        path: ./src/rust/Get-token-windows-*.zip
        retention-days: 5
        if-no-files-found: warn

  rust-build-macos:
    name: Rust Build macOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Add macOS targets
      run: |
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin || echo "aarch64-apple-darwin not available, will try cross-compilation"

    - name: Build for x86_64-macos
      run: |
        cd ./src/rust
        cargo build --release --target=x86_64-apple-darwin
        cp target/x86_64-apple-darwin/release/Get-token ./Get-token-macos-x64
        tar -czf Get-token-macos-x64.tar.gz Get-token-macos-x64

    - name: Build for aarch64-macos
      run: |
        cd ./src/rust
        # Try direct build first
        if rustup target list --installed | grep -q aarch64-apple-darwin; then
          echo "Building directly for aarch64-apple-darwin"
          cargo build --release --target=aarch64-apple-darwin || echo "Direct build failed, will try cross-compilation"
          
          if [ -f "target/aarch64-apple-darwin/release/Get-token" ]; then
            cp target/aarch64-apple-darwin/release/Get-token ./Get-token-macos-arm64
            tar -czf Get-token-macos-arm64.tar.gz Get-token-macos-arm64
            echo "ARM64 macOS build successful"
            exit 0
          fi
        fi
        
        # Try cross-compilation with explicit SDK settings
        echo "Attempting cross-compilation for ARM64 macOS"
        rustup target add aarch64-apple-darwin || echo "Target already added or unavailable"
        
        export SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
        export MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)
        cargo build --release --target=aarch64-apple-darwin
        
        if [ -f "target/aarch64-apple-darwin/release/Get-token" ]; then
          cp target/aarch64-apple-darwin/release/Get-token ./Get-token-macos-arm64
          tar -czf Get-token-macos-arm64.tar.gz Get-token-macos-arm64
          echo "Cross-compilation successful"
          exit 0
        fi
        
        # Fall back to universal binary or placeholder
        echo "Cross-compilation failed, creating universal binary"
        cargo build --release
        lipo -create -output Get-token-macos-universal target/release/Get-token
        cp Get-token-macos-universal ./Get-token-macos-arm64
        echo "This is a universal binary that may work on ARM64 Macs." > README.arm64.txt
        tar -czf Get-token-macos-arm64.tar.gz Get-token-macos-arm64 README.arm64.txt

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-macos-builds
        path: ./src/rust/Get-token-macos-*.tar.gz
        retention-days: 5
        if-no-files-found: warn

  release:
    needs: [java-build, go-build, rust-build-linux-standard, rust-build-linux-mips, rust-build-windows, rust-build-macos]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update artifacts branch with Rust binaries
      - name: Checkout artifacts branch
        uses: actions/checkout@v4
        with:
          ref: artifacts
          fetch-depth: 0
          path: artifacts-branch

      - name: Update artifacts branch
        run: |
          # Create directories
          mkdir -p artifacts-branch/rust/linux
          mkdir -p artifacts-branch/rust/windows
          mkdir -p artifacts-branch/rust/macos
          mkdir -p artifacts-branch/rust/mips
          
          # Copy Rust artifacts
          cp -r artifacts/rust-linux-builds/* artifacts-branch/rust/linux/ || echo "No standard Linux builds to copy"
          cp -r artifacts/rust-linux-mips-builds/* artifacts-branch/rust/mips/ || echo "No MIPS builds to copy"
          cp -r artifacts/rust-windows-builds/* artifacts-branch/rust/windows/ || echo "No Windows builds to copy"
          cp -r artifacts/rust-macos-builds/* artifacts-branch/rust/macos/ || echo "No macOS builds to copy"
          
          # Commit and push
          cd artifacts-branch
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Update artifacts for v${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push origin artifacts

  docker-graalvm:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: java-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: java-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Java-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker/copilot
          cat > docker/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot .
          RUN chmod +x copilot
          EXPOSE 80
          ENTRYPOINT ["./copilot", "80"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-java:
    needs: [release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Java
        run: |
          mkdir -p docker-java
          cp build/*.jar docker-java/
          cat > docker-java/Dockerfile << 'EOF'
          FROM openjdk:17-slim
          WORKDIR /app
          COPY *-with-dependencies.jar app.jar
          EXPOSE 80
          ENTRYPOINT ["java", "-jar", "app.jar", "80"]
          EOF

      - name: Build and push Java Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-java
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/copilot:java-latest
            ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }}

  docker-go:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: go-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: go-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download Go artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Go
        run: |
          mkdir -p docker-go
          cp build/Go-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker-go/copilot-go
          cat > docker-go/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot-go .
          RUN chmod +x copilot-go
          EXPOSE 80
          ENTRYPOINT ["./copilot-go", "80"]
          EOF

      - name: Build and push Go Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-go
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-manifest:
    needs: [docker-graalvm, docker-go, docker-java]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create and push manifests for GraalVM
        run: |
          # First verify that images exist
          docker manifest
