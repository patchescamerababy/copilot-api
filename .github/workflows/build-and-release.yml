name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-x64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
      - uses: actions/checkout@v4

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          architecture: ${{ matrix.arch }}

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-${{ matrix.arch }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.arch }}-m2

      - name: Build with Maven
        run: mvn -B clean package assembly:single --file pom.xml

      - name: Prepare Artifacts Directory
        shell: bash
        run: mkdir -p dist

      - name: Copy JAR files
        shell: bash
        run: |
          # Copy the regular JAR
          cp target/*[^s].jar dist/Copilot-api-original.jar
          # Copy the JAR with dependencies
          cp target/*-with-dependencies.jar dist/Copilot-api-with-dependencies.jar
          # Copy the sources JAR if exists
          cp target/*-sources.jar dist/Copilot-api-sources.jar || true
          # Copy the javadoc JAR if exists
          cp target/*-javadoc.jar dist/Copilot-api-javadoc.jar || true

      - name: Upload JAR Artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: dist/*.jar
          retention-days: 5

      - name: Prepare for Native Image
        shell: bash
        run: |
          mkdir -p target/native-image
          cp dist/Copilot-api-with-dependencies.jar target/native-image/Copilot-api.jar

      - name: Build Native Image (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          cd target\native-image
          native-image.cmd ^
          -H:+AddAllCharsets ^
          -jar Copilot-api.jar ^
          -H:Name=Copilot-api ^
          --enable-https ^
          --enable-http ^
          --static ^
          --no-fallback ^
          --initialize-at-build-time=Main ^
          --initialize-at-build-time=CompletionHandler ^
          --initialize-at-build-time=EmbeddingHandler ^
          --initialize-at-build-time=HeadersInfo

      - name: Build Native Image (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          cd target/native-image
          native-image \
            -H:+AddAllCharsets \
            -jar Copilot-api.jar \
            -H:Name=Copilot-api \
            --enable-https \
            --enable-http \
            --static \
            --no-fallback \
            --initialize-at-build-time=Main \
            --initialize-at-build-time=CompletionHandler \
            --initialize-at-build-time=EmbeddingHandler \
            --initialize-at-build-time=HeadersInfo

      - name: Build Native Image (macOS)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          cd target/native-image
          native-image \
            -H:+AddAllCharsets \
            -jar Copilot-api.jar \
            -H:Name=Copilot-api \
            --enable-https \
            --enable-http \
            --no-fallback \
            --initialize-at-build-time=Main \
            --initialize-at-build-time=CompletionHandler \
            --initialize-at-build-time=EmbeddingHandler \
            --initialize-at-build-time=HeadersInfo

      - name: Set exe suffix for native binary
        id: exe_suffix
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "::set-output name=suffix::.exe"
          else
            echo "::set-output name=suffix::"
          fi

      - name: Upload Native Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.label }}-build
          path: target/native-image/Copilot-api${{ steps.exe_suffix.outputs.suffix }}
          retention-days: 5

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          # 移动 native 二进制文件（示例中仅处理 linux-amd64 与 windows）
          if [ -f "artifacts/linux-amd64-build/Copilot-api" ]; then
            cp "artifacts/linux-amd64-build/Copilot-api" release-files/
          fi
          if [ -f "artifacts/windows-build/Copilot-api.exe" ]; then
            cp "artifacts/windows-build/Copilot-api.exe" release-files/
          fi
          # 移动 JAR 文件
          cp artifacts/jar-files/* release-files/ || true
          ls -la release-files/

      - name: Create Release Tag
        id: tag
        run: |
          TAG="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag $TAG
          git push origin $TAG

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: linux-amd64-build
          - platform: linux/arm64
            artifact: linux-arm64-build
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Copilot-api docker/Copilot
          # 使用 echo 写入完整 Dockerfile（注意 echo 命令逐行写入）
          echo "FROM ubuntu:22.04" > docker/Dockerfile
          echo "WORKDIR /app" >> docker/Dockerfile
          echo "COPY Copilot ." >> docker/Dockerfile
          echo "RUN chmod +x Copilot" >> docker/Dockerfile
          echo "EXPOSE 80" >> docker/Dockerfile
          echo 'ENTRYPOINT ["./Copilot", "80"]' >> docker/Dockerfile

      - name: Set arch tag
        id: arch_tag
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "linux/amd64" ]; then
            echo "::set-output name=tag::amd64"
          else
            echo "::set-output name=tag::arm64"
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ steps.arch_tag.outputs.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}-${{ steps.arch_tag.outputs.tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ steps.arch_tag.outputs.tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}-${{ steps.arch_tag.outputs.tag }}

  docker-manifest:
    needs: docker
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Get version
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest for Docker Hub
        run: |
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest

          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}

      - name: Create and push manifest for GitHub Container Registry
        run: |
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:latest

          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}
