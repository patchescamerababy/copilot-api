name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  java-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: mvn -B clean package assembly:single --file pom.xml

    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*[^s].jar
          target/*-with-dependencies.jar
          target/*-sources.jar
          target/*-javadoc.jar
        retention-days: 5

    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        mkdir -p target\native-image
        copy target\*-with-dependencies.jar target\native-image\Copilot-api.jar
        cd target\native-image
        native-image.cmd ^
        -H:+AddAllCharsets ^
        -jar Copilot-api.jar ^
        -H:Name=Java-Copilot-%{{ matrix.label }}% ^
        --enable-https ^
        --enable-http ^
        --static ^
        --no-fallback ^
        --initialize-at-build-time=Main ^
        --initialize-at-build-time=CompletionHandler ^
        --initialize-at-build-time=EmbeddingHandler ^
        --initialize-at-build-time=HeadersInfo

    - name: Build Native Image (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p target/native-image
        cp target/*-with-dependencies.jar target/native-image/Copilot-api.jar
        cd target/native-image
        native-image \
          -H:+AddAllCharsets \
          -jar Copilot-api.jar \
          -H:Name=Java-Copilot-${{ matrix.label }} \
          --enable-https \
          --enable-http \
          ${{ matrix.static == true && '--static' || '' }} \
          --no-fallback \
          --initialize-at-build-time=Main \
          --initialize-at-build-time=CompletionHandler \
          --initialize-at-build-time=EmbeddingHandler \
          --initialize-at-build-time=HeadersInfo

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.label }}
        path: target/native-image/Java-Copilot-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5

  go-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            label: windows-amd64
          - goos: windows
            goarch: arm64
            label: windows-arm64
          - goos: linux
            goarch: amd64
            label: linux-amd64
          - goos: linux
            goarch: arm64
            label: linux-arm64
          - goos: darwin
            goarch: amd64
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      working-directory: ./go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}"
        go build -o "$output_name" -v ./...

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: go-${{ matrix.label }}
        path: go/Go-Copilot-${{ matrix.label }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        retention-days: 5

  release:
    needs: [java-build, go-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-graalvm:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: java-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: java-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Java-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker/copilot
          cat > docker/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot .
          RUN chmod +x copilot
          EXPOSE 80
          ENTRYPOINT ["./copilot", "80"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-java:
    needs: [release]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Java
        run: |
          mkdir -p docker-java
          cp build/*.jar docker-java/
          cat > docker-java/Dockerfile << 'EOF'
          FROM openjdk:17-slim
          WORKDIR /app
          COPY *-with-dependencies.jar app.jar
          EXPOSE 80
          ENTRYPOINT ["java", "-jar", "app.jar", "80"]
          EOF

      - name: Build and push Java Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-java
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:java-${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/copilot:java-latest
            ghcr.io/${{ github.repository_owner }}/copilot:java-${{ steps.version.outputs.version }}

  docker-go:
    needs: [release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: go-linux-amd64
            arch_tag: amd64
          - platform: linux/arm64
            artifact: go-linux-arm64
            arch_tag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download Go artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile for Go
        run: |
          mkdir -p docker-go
          cp build/Go-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker-go/copilot-go
          cat > docker-go/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY copilot-go .
          RUN chmod +x copilot-go
          EXPOSE 80
          ENTRYPOINT ["./copilot-go", "80"]
          EOF

      - name: Build and push Go Docker
        uses: docker/build-push-action@v5
        with:
          context: docker-go
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-latest-${{ matrix.arch_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-latest-${{ matrix.arch_tag }}
            ghcr.io/${{ github.repository_owner }}/copilot:go-${{ steps.version.outputs.version }}-${{ matrix.arch_tag }}

  docker-manifest:
    needs: [docker-graalvm, docker-go, docker-java]
    runs-on: ubuntu-latest
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifests for GraalVM
        run: |
          # Docker Hub manifests for GraalVM (latest)
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest

          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.release.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.release.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.release.outputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.release.outputs.version }}

          # GitHub Container Registry manifests
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:latest

          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.version.outputs.version }}
