name: Release and Docker

on:
  workflow_run:
    workflows: ["GraalVM Native Image Build"]
    types:
      - completed
    branches:
      - main

jobs:
  prepare-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-build"
          merge-multiple: true
          path: artifacts

      - name: Download JAR files
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: artifacts/jar

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/Copilot-api
            artifacts/Copilot-api.exe
            artifacts/jar/*.jar
          generate_release_notes: true

  docker:
    needs: prepare-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: linux-amd64-build
          - platform: linux/arm64
            artifact: linux-arm64-build

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Copilot-api docker/Copilot
          cat > docker/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY Copilot .
          RUN chmod +x Copilot
          EXPOSE 80
          ENTRYPOINT ["./Copilot", "80"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}

  docker-manifest:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest for Docker Hub
        run: |
          # Latest manifest
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest

          # Version manifest
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ steps.get_version.outputs.version }}

      - name: Create and push manifest for GitHub Container Registry
        run: |
          # Latest manifest
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:latest

          # Version manifest
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:${{ steps.get_version.outputs.version }}
