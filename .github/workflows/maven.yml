name: Build and Release

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'go/**'
      - 'pom.xml'
      - '.github/workflows/**'

permissions:
  contents: write
  packages: write

jobs:
  version:
    uses: ./.github/workflows/version.yml

  java-build:
    runs-on: ${{ matrix.os }}
    needs: version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
          - os: windows-latest
            arch: amd64
            label: windows-amd64
          - os: macos-latest
            arch: amd64
            label: macos-amd64
          - os: macos-14
            arch: arm64
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: mvn -B clean package assembly:single --file pom.xml

    - name: Build Native Image
      run: |
        mkdir -p target/native-image
        cp target/*-with-dependencies.jar target/native-image/Copilot-api.jar
        cd target/native-image
        native-image \
          -H:+AddAllCharsets \
          -jar Copilot-api.jar \
          -H:Name=Java-Copilot-${{ matrix.label }} \
          --enable-https \
          --enable-http \
          --no-fallback \
          --initialize-at-build-time=Main \
          --initialize-at-build-time=CompletionHandler \
          --initialize-at-build-time=EmbeddingHandler \
          --initialize-at-build-time=HeadersInfo
      shell: bash

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.label }}
        path: target/native-image/Java-Copilot-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5

    - name: Upload JARs
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          target/*[^s].jar
          target/*-with-dependencies.jar
          target/*-sources.jar
          target/*-javadoc.jar
        retention-days: 5

  go-build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
            label: windows-amd64
          - goos: windows
            goarch: arm64
            suffix: .exe
            label: windows-arm64
          - goos: linux
            goarch: amd64
            suffix: ''
            label: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: ''
            label: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: ''
            label: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: ''
            label: macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      working-directory: ./go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        output_name="Go-Copilot-${{ matrix.label }}${{ matrix.suffix }}"
        go build -o "$output_name" -v ./...

    - name: Upload Build
      uses: actions/upload-artifact@v4
      with:
        name: go-${{ matrix.label }}
        path: go/Go-Copilot-${{ matrix.label }}${{ matrix.suffix }}
        retention-days: 5

  release:
    needs: [version, java-build, go-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Files
        run: |
          mkdir -p release-files
          # Copy all artifacts to release directory
          cp -r artifacts/*/* release-files/
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: Release ${{ needs.version.outputs.version }}
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: [version, release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            artifact: java-linux-amd64
          - platform: linux/arm64
            artifact: java-linux-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Dockerfile
        run: |
          mkdir -p docker
          cp build/Java-Copilot-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }} docker/Copilot
          cat > docker/Dockerfile << 'EOF'
          FROM ubuntu:22.04
          WORKDIR /app
          COPY Copilot .
          RUN chmod +x Copilot
          EXPOSE 80
          ENTRYPOINT ["./Copilot", "80"]
          EOF

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.version.outputs.version }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ghcr.io/${{ github.repository_owner }}/copilot:latest-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}
            ghcr.io/${{ github.repository_owner }}/copilot:${{ needs.version.outputs.version }}-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}

  docker-manifest:
    needs: [version, docker]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifests
        run: |
          # Docker Hub manifests
          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:latest

          docker manifest create ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.version.outputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.version.outputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.version.outputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/copilot:${{ needs.version.outputs.version }}

          # GitHub Container Registry manifests
          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:latest \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:latest-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:latest

          docker manifest create ghcr.io/${{ github.repository_owner }}/copilot:${{ needs.version.outputs.version }} \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ needs.version.outputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/copilot:${{ needs.version.outputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/copilot:${{ needs.version.outputs.version }}
